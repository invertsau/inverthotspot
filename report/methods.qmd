# Methods

```{r setup, include=FALSE, eval=TRUE}
## Setting up
 pacman::p_load(galah, arrow, here, tidyverse, dplyr, janitor, ozmaps, sf, ggplot2, skimr, sp, purrr, ConR, dplyr, DT, zoomerjoin, gt)

# Load helper functions
source(here("R/utils.R"))

## Read in parquet of raw download
myg_spiders_all <- open_dataset(get_latest_download(path_to_galah_data = paste0(here("data/galah/"), "/")))

# Load cleaned data
myg_spiders_cleaned <- read_parquet(get_latest_cleaned_data(path_to_clean_data = paste0(here("output/data/"), "/"))[2])

# Collect data for overview and cleaning
## Subset columns we want for ALA data overview
myg_spiders <- myg_spiders_all |> 
  select(scientificName, decimalLatitude:collectionCode) |> 
  collect()

# AFD parquet used for Data cleaning
afd <- open_dataset(here("data/afd_05-2023_clean.parquet"))
```


## Data retrieval

::: {.callout-note}
We downloaded data for this report on the `r get_latest_download(paste0(here("data/galah/"), "/")) |> stringr::str_extract(pattern = regex("[0-9]{4}\\-[0-9]{2}\\-[0-9]{2}"))` and the raw download contained `r nrow(myg_spiders_all)` records
:::

::: {.callout-tip title="Source code"}
The data retrieval workflow can be found [here](https://github.com/invertsau/inverthotspot/blob/main/R/01_ala_data_retrieval_mygalomorph.Rmd)
:::

We used data from [Atlas of Living Australia (ALA)]() for this study. We downloaded occurrence records using the `galah` [R package]() using the following criterion:

1.  Found in Australian mainland and Tasmania.
2.  Identified to a taxon rank of species.
3.  Basis of record of either:
    i)  Preserved specimen
    ii) Material sample
    iii) Machine observation
    iv) Human observation
4.  Coordinate uncertainty of less than 1000 meters or has a value of NA (citizen science records or human observations are typically entered as NA)

We also used ALA's data quality assertions to further refine our download. We excluded occurrence records using the following criterion:

1.  Coordinates are equal to 0
2.  Coordinates are presumed swapped e.g. when latitude is entered as longitude
3.  Latitude and longitude values are presumed negated
4.  Coordinates our out of range
5.  Taxon excluded by the ALA
6.  Taxon considered as a questionable species

See @sec-assertions to learn more about which assertions we used for this project.



## Data overview

::: {.callout-note}
The full data overview report can be found [here](https://posit.cloud/content/7700631)
:::

::: {.callout-tip title="Source code"}
The data overview workflow can be found [here](https://github.com/invertsau/inverthotspot/blob/main/R/02_ala_data_overview_mygalomorph.Rmd)
:::

After the initial data retrieval the data were summarised to provide an overview of the number of records, species, and families represented, as well as the broad distribution of these across Australian states. The basis of records and data quality assertions were also investigated. This provided a broad overview of data quality and facilitated review by taxonomic experts.

### Species

```{r, echo=FALSE}
# Total number of species
total_myg <- myg_spiders |> 
  filter(!is.na(species)) |> 
  distinct(species) |> 
  nrow()
```

There are **`r total_myg` species** in total in the original download.

The below barplot shows the distribution of the number of records across species.

```{r, echo = FALSE}
# number of records for each species
myg_records <- myg_spiders |>
  filter(!is.na(species)) |>
  group_by(species) |>
  tabyl(species) |>
  arrange(desc(n))

myg_records_df <- as.data.frame(myg_records)
barplot(myg_records_df$n, xlab = "species", ylab = "records")

```

The below table shows the number of records of each species.

```{r, echo = FALSE}
myg_records |> 
  mutate(percent = percent*100) |>
  datatable() |>
  formatRound(columns="percent", digits=2)
```

### Family

Barplot showing the number of species in each family:

```{r, echo = FALSE, message=FALSE}
# N species, total number of species (bar chart or alike, or tabset)
# N species per family
# number of species in each family
myg_fams <- myg_spiders |>
  filter(!is.na(species)) |>
  group_by(species) |>
  #filter(n() > 2) |>
  group_by(family, species) |>
  summarise(n = n()) |>
  tabyl(family) |>
  arrange(desc(n))

as.data.frame(myg_fams)|>
  mutate(family = factor(family, levels = family))|>
  ggplot(aes(x = family, y = n)) +
  geom_bar(stat = "identity") +
  labs(y = "number of species") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, colour = "black"),
        axis.text.y = element_text(colour = "black"),
        axis.line = element_line(colour = "black"))
#which families are not represented?

```

### Taxonomic overview by state

```{r, include=FALSE}
# number of records by state, for species with at least three overall records
myg_records_by_state <- myg_spiders |>
  filter(!is.na(species)) |>
  filter(stateProvince %in% c("Queensland", "Western Australia", "New South Wales", "South Australia", 
                              "Victoria", "Northern Territory", "Tasmania", "Australian Capital Territory")) |>
  #group_by(species) |>
  #filter(n() > 2) |>
  group_by(stateProvince, species) |>
  summarise(n = n()) |>
  arrange(stateProvince, desc(n))

# Top 3 most recorded species in each state
tab <- slice_head(myg_records_by_state, n = 3) |>
  print(n = Inf) |> 
  group_by(stateProvince)
```

```{r, echo = FALSE}
 tab |> gt()
```


```{r, echo = FALSE, message=FALSE}
#| fig-cap: 
#|   - "Barplot showing the number of species and families by state"
# number of species by state, for species with at least three overall records
myg_spp_by_state <- myg_records_by_state |> 
  tabyl(stateProvince) |>
  arrange(desc(n))

# number of families by state
myg_fam_by_state <- myg_spiders |>
  filter(!is.na(species)) |>
  filter(stateProvince %in% c("Queensland", "Western Australia", "New South Wales", "South Australia", 
                              "Victoria", "Northern Territory", "Tasmania", "Australian Capital Territory")) |>
  group_by(species) |>
 # filter(n() > 2) |>
  group_by(stateProvince, family) |>
  summarise(n()) |>
  tabyl(stateProvince) |>
  arrange(desc(n))

#plotting numbers of species and families by state
myg_spp_fam_by_state <- left_join(myg_spp_by_state, myg_fam_by_state, by = "stateProvince")

scale_right <- max(myg_spp_fam_by_state$n.y)/max(myg_spp_fam_by_state$n.x)

as.data.frame(myg_spp_fam_by_state)|>
  mutate(stateProvince = factor(stateProvince, levels = stateProvince))|>
  ggplot(aes(x = stateProvince)) +
  geom_bar(stat = "identity", aes(y = n.x, fill = "species")) +
  geom_bar(stat = "identity", aes(y = n.y/scale_right, fill = "families"), colour = "black", alpha = 0.5) +
  scale_y_continuous(sec.axis = sec_axis(~.*scale_right, name = "number of families")) + 
  scale_fill_manual(values = c("grey30", "lightgreen")) +
  labs(y = "number of species") +
  theme_minimal() +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, colour = "black"),
        axis.text.y = element_text(colour = "black"),
        axis.line = element_line(colour = "black"))
```



```{r, include = FALSE}
# map of Australia with states
aus <- st_transform(ozmaps::ozmap_states, 4326)

# checking for differences between state names
setdiff(aus$NAME, myg_spp_by_state$stateProvince)
setdiff(myg_spp_by_state$stateProvince, aus$NAME)

# checking distribution of data
hist(myg_spp_by_state$n)
hist(log(myg_spp_by_state$n))

# joining map with species count data
myg_spp_aus <- myg_spp_by_state |>
  full_join(y = aus, by = c("stateProvince" = "NAME")) |>
  st_as_sf()
```

```{r, echo=FALSE}
#| fig-cap: 
#|   - "Map showing the number of species by state"
# plotting number of species by state
ggplot() + 
  geom_sf(data = myg_spp_aus,
          aes(fill = n),
          colour = "black") +
  scale_fill_distiller(name = "state_spp",
                       type = "seq",
                       palette = "YlOrBr",
                       direction = 1,
                       guide = guide_colourbar(direction = "horizontal",
                                               label.position = "bottom",
                                               title = NULL)) +
  annotate("text", 
           x = 133, 
           y = -45.5, 
           label = "No. of species",
           size = 6) +
  coord_sf(xlim = c(110, 155), ylim = c(-45, -10)) +
  theme_void() +
  theme(legend.position = "bottom",
        legend.key.width = unit(12, 'mm'))  
```

```{r, include = FALSE}

# map of Australia with states
aus <- st_transform(ozmaps::ozmap_states, 4326)

# checking for differences between state names
setdiff(aus$NAME, myg_fam_by_state$stateProvince)
setdiff(myg_fam_by_state$stateProvince, aus$NAME)

# checking distribution of data
hist(myg_fam_by_state$n)
```

```{r, echo=FALSE}
#| fig-cap: 
#|   - "Map showing the number of families by state"
# joining map with species count data
myg_fam_aus <- myg_fam_by_state |>
  full_join(y = aus, by = c("stateProvince" = "NAME")) |>
  st_as_sf()

# plotting number of species by state
ggplot() + 
  geom_sf(data = myg_fam_aus,
          aes(fill = n),
          colour = "black") +
  scale_fill_distiller(name = "state_fam",
                       type = "seq",
                       palette = "YlOrBr",
                       direction = 1,
                       guide = guide_colourbar(direction = "horizontal",
                                               label.position = "bottom",
                                               title = NULL)) +
  annotate("text", 
           x = 133, 
           y = -45.5, 
           label = "No. of families",
           size = 6) +
  coord_sf(xlim = c(110, 155), ylim = c(-45, -10)) +
  theme_void() +
  theme(legend.position = "bottom",
        legend.key.width = unit(12, 'mm'))  
```

### [Basis of record](https://gbif.github.io/parsers/apidocs/org/gbif/api/vocabulary/BasisOfRecord.html)

Total counts of basis of record types. 

```{r, echo = FALSE}
# Counts of basis of record types. "OCCURRENCE" and "OBSERVATION" types were excluded as they could not be traced back to a source.
myg_spiders |>
  filter(!is.na(species),
         !basisOfRecord %in% c("OCCURRENCE", "OBSERVATION")) |>
  tabyl(basisOfRecord) |>
  mutate(percent = percent*100) |>
  arrange(desc(n)) |>
  adorn_rounding(digits = 2, columns = percent) |> gt()
```

`PRESERVED_SPECIMEN`: An occurrence record describing a preserved specimen.\
`HUMAN_OBSERVATION`: An occurrence record describing an observation made by one or more people.\
`MATERIAL_SAMPLE`: An occurrence record based on samples taken from other specimens or the environment.\
`MACHINE_OBSERVATION`: An occurrence record describing an observation made by a machine.

### Assertions {#sec-assertions}

Various tests are run on occurrence data in the Atlas of Living Australia, resulting in assertions about the content and quality of the data. These assertions help users gauge whether data is fit for their purposes and allow for easy data filtering. Assertions are logical variables (`TRUE/FALSE`) and take the value TRUE when they apply to the associated occurrence record. Descriptions of Assertions can be found at [here](https://github.com/AtlasOfLivingAustralia/ala-dataquality/wiki.)

Here, we have focused on spatial and taxonomic assertions because accurate identification of taxa and their spatial distributions is imperative to the calculation of endemism metrics and subsequent mapping.

#### Spatial assertions

We investigated a range of spatial assertions and deemed the following safe to bypass when refining the data download:

-   `COORDINATE_UNCERTAINTY_METERS_INVALID`\
    We performed visual checks and flagged records did not seem to be out of species' range. They were mostly cases where `coordinateUncertaintyinMeters` was NA. We know iNaturalist records input NA for `coordinateUncertaintyinMeters`, therefore in refining the data download we will include records where `coordinateUncertaintyinMeters` is NA or less than 1000 m. We will remove flagged values for a sensitivity analysis later on.
-   `COORDINATE_ROUNDED`\
    The original coordinates were rounded to six decimals (\~ 1 m precision) to simplify processing. The level of precision lost will not affect the endemism analysis.

The following will be used to refine the data download as they indicate coordinates outside of the given country (records flagged as TRUE will be excluded):

-   `COORDINATE_OUT_OF_RANGE`
-   `PRESUMED_NEGATED_LONGITUDE`
-   `PRESUMED_NEGATED_LATITUDE`
-   `PRESUMED_SWAPPED_COORDINATE`
-   `ZERO_COORDINATE`

#### Taxonomic assertions

The following assertions were used to identify taxonomic discrepancies in the data and allow for review by taxonomic experts:

`TAXON_MATCH_FUZZY` - is flagged when the supplied scientific name (`raw_scientificName`) does not exactly match the taxonomic backbone of the Atlas.


## Data cleaning

::: {.callout-note}
The full data cleaning report can be found [here](https://posit.cloud/content/7700644)
:::

::: {.callout-tip title="Source code"}
The data overview workflow can be found [here](https://github.com/invertsau/inverthotspot/blob/main/R/03_ala_data_clean_mygalomorph.Rmd)
:::

The following criterion were used to identify and remove records for the endemism analyses:

- Taxonomic errors, invalid species names or synonyms
- Species introduced to Australia
- Marine taxa
- Records with geographic errors
- Any subspecies level identifications were reclassified to species level
- Duplicates

### Taxonomic Errors

#### Invalid names

The [(AFD)](https://biodiversity.org.au/afd/home) is an online catalogue of taxonomic and biological information on all animal species known to occur within Australia and its territories.

The Australian Faunal Directory (AFD) was used to cross validate the records from ALA to ensure all records had valid species names.

A list of valid species names was downloaded from the AFD and was compared to the species names in our dataset, subsetting any records that did not have a matching valid name.

```{r, include=FALSE}
# Filter down to Arachnida 
arachnids <- afd |> 
  filter(CLASS == "ARACHNIDA") |> 
  collect()

# Subset species in ALA data that DID NOT match with the AFD
AFD_unmatched <- myg_spiders |> 
  filter(! scientificName %in% arachnids$FULL_NAME) |> 
  pull(scientificName) |> 
  unique()

# Compute reporting stats
length(AFD_unmatched)
unique(myg_spiders$scientificName) |> length()
```

The AFD lists any applicable synonyms for each species within their database. The `r length(AFD_unmatched)` unmatched species might be synonyms of valid species.

```{r, include=F}
afd_synonyms <- word(arachnids$SYNONYMS, 1, 2)[complete.cases(word(arachnids$SYNONYMS, 1, 2))]

fuzzy_matched <- AFD_unmatched |> 
  jaccard_left_join(afd_synonyms, n_bands = 20, band_width = 6, threshold = .8) |> 
  rename(ALA_names = value.x,
         AFD_synonyms = value.y)

issynonym_count = is.na(fuzzy_matched$AFD_synonyms) |> table() |> _[1]
```

The potential synonym matches are as follows: 

```{r, echo=FALSE}
fuzzy_matched |> gt()
```

These will be verified by experts to determine how to best handle them. For now,taxa in our dataset that are not matched in the AFD will be excluded.

```{r, include=FALSE}
 myg_spiders_no_unmatched<- myg_spiders |> 
  filter(! scientificName %in% AFD_unmatched)

unmatched_excluded <- myg_spiders |> 
  filter(scientificName %in% AFD_unmatched)
```

::: {.callout-important}
As such, we decide to exclude these `r length(AFD_unmatched)` taxa from our dataset (`r nrow(unmatched_excluded)` observations, `r signif(nrow(unmatched_excluded)/nrow(myg_spiders),1)`% of raw dataset).
:::

::: {.callout-note}
After removing the taxonomic errors, we have `r nrow(myg_spiders_no_unmatched)` observations after the exclusion, `r unique(myg_spiders_no_unmatched$scientificName) |> length()` species.
:::


### Introduced Species

Any species which are not native to Australia were removed from our dataset. To identify all introduced species in the dataset, we used species lists from the [World Spider Catalogue (WSC)](https://wsc.nmbe.ch/) and the [Global Register of Invasive and Introduced Species (GRIIS)]((http://griis.org/)).

The (WSC) is a comprehensive online database of spiders from around the world, with detailed taxonomic information, distribution maps, references and images.

```{r, include=FALSE}
wsc <- read_csv(here("data/wsc/species_export_20230929.csv"))

introduced_taxa <- wsc |> 
  filter(str_detect(distribution, pattern = "Introduced to.*Australia")) 

introduced_taxa_wfullname <- introduced_taxa |> 
  mutate(scientific_name = paste(genus, species)) 
```

::: {.callout-important}
Introduced species in the WSC matched with `r length(which(myg_spiders_no_unmatched$scientificName %in% introduced_taxa_wfullname$scientific_name))` records in our data.
:::

(GRIIS) is a project by the IUCN SSC Invasive Species Specialist Group to compile annotated and verified country-wise inventories of introduced and invasive species.

```{r, include=FALSE}
# Join distrubtion.txt and taxon-edit.txt
griis_distrib <- read.delim(here("data/griis-australia-v1.6/distribution.txt"))
griis_taxon <- read.delim(here("data/griis-australia-v1.6/taxon-edited.txt"))
# check for missing values
setdiff(griis_distrib$id, griis_taxon$id) |> length() # 24 missing
setdiff(griis_taxon$id, griis_distrib$id) # none missing
# join lists
griis_all <- left_join(griis_distrib, griis_taxon, by = "id")  # Apply left_join dplyr function 

# filter by class = arachnida
str_subset(griis_all$class, "Arachnida") # there are no introduced arachnids in this list
```

::: {.callout-important}
There are no arachnids in the Australian GRIIS list
:::

::: {.callout-note}
For the purpose of this project, we conclude there are no introduced spiders in our dataset.
:::

### Marine Species

```{r, include=FALSE}
wormsOutput <- readRDS(here("output/2024-10-17_worrms_myg_wm_records_taxamatch.rds"))
```

The World Register of Marine Species (WoRMS) was used to identify and remove marine species from the data. WoRMS provides a authoritative and comprehensive list of names of marine organisms, including currently valid and alternative names.

Using the [`worrms` R package](https://docs.ropensci.org/worrms/), we supplied our list of `r unique(myg_spiders_no_unmatched$scientificName) |> length()` species to the `wm_records_taxamatch()` function to check whether any our taxa are classified as marine. 

::: {.callout-note}
In the case of this project, we found `r length(which(wormsOutput$match_type %in% "exact"))` taxa that matched with marine species in the WoRMS database. 
:::

### Geographic Errors

```{r, include=FALSE}
aus <- st_transform(ozmaps::ozmap_country, 4326)

base_map <- ggplot() + 
  geom_sf(data = aus, fill = NA) + 
  theme_minimal()
```

Biodiversity data, especially citizen science data can have various geographic imperfections. For example, occurrence records may include data from institutions such as botanic gardens or zoos which may not be reflective of a specie's natural range. There may be data entry errors where the default location of a taxa is assumed to be the center of particular region. For these reasons, we used the R package [`CoordinateCleaner`](https://docs.ropensci.org/CoordinateCleaner/index.html) to investigate potential errors in our dataset.

We used the `clean_coordinates()` function and tested whether any of our coordinates were the following: 

- General coordinate validity
- Country and province centroids
- Capital coordinates
- Coordinates of biodiversity institutions
- Spatial outliers
- Temporal outliers
- Assigned to the location of the GBIF headquarters
- Located in Urban areas
- Located in the sea
- Duplicated values
- Plain zeros

Table of the number of observations flagged by CoordinateCleaner's testing suite: 

```{r, echo=FALSE, eval=TRUE}
cc_tests <- readRDS(here("output/CoordinateCleaner_flagged.rds"))

cc_summary <- CoordinateCleaner:::summary.spatialvalid(cc_tests)

tibble(Test = names(cc_summary), 
         `Number of Observations` = as.vector(cc_summary)) |> 
  gt()
```

CoordinateCleaner, identified a large number of duplicates which we have a separate workflow in @sec-dups so we decided to ignore the duplicates flagged by CoordinateCleaner.

After some consideration: 

- `r cc_summary[".cap"] |> as.vector()` records excluded due to being near a capital vicinity (`r (( cc_summary[".cap"] |> as.vector() / nrow(myg_spiders)) *100 ) |> round(2)`%)
- `r cc_summary[".inst"] |> as.vector()` records excluded due to being in the vicinity of biodiversity institutions (`r (( cc_summary[".inst"] |> as.vector() / nrow(myg_spiders)) *100 )|> round(2)`%).
- `r cc_summary[".sea"] |> as.vector()` records excluded due to being in sea (`r (( cc_summary[".sea"] |> as.vector() / nrow(myg_spiders)) *100 )|> round(2)`%).

```{r, include=FALSE}
myg_spiders_geo_clean <- cc_tests |> 
  filter(!.cap == FALSE,
         !.inst == FALSE, 
         !.sea == FALSE)
```

::: {.callout-note}
After removing these geographic errors, we have `r nrow(myg_spiders_geo_clean)` observations after the exclusion, `r unique(myg_spiders_geo_clean$scientificName) |> length()` species.
:::

### Duplicate Records {#sec-dups}

Duplicate records can affect statistical analyses by pseudoreplication (increasing sample size but not adding information). We noticed that some records that had the _same_ coordinate values for a large number of _different_ species. These records were typically from museum record providers, we suspect this was due to the sampling method e.g. pitfall traps. For this reason, we decided to remove records if they fulfiled the following critiera: 

- the record was duplicated at the species level
- had same exact coordinates
- had same time and date of collection 

```{r, include=FALSE}
deduplicated_myg_spiders <- myg_spiders_geo_clean |> 
  filter(!is.na(decimalLatitude) & !is.na(decimalLongitude)) |> 
   group_by(scientificName, decimalLatitude, decimalLongitude, eventDate) |> 
   filter(n() == 1) |> 
  ungroup()

dups <- myg_spiders_geo_clean |> 
  filter(!is.na(decimalLatitude) & !is.na(decimalLongitude)) |> 
   group_by(scientificName, decimalLatitude, decimalLongitude, eventDate) |> 
   filter(!n() == 1) 
```

::: {.callout-important}
Using this method, we excluded `r nrow(dups)` from the dataset (`r ((nrow(dups)/nrow(myg_spiders)) *100 )|> round(2)`%). 
:::

::: {.callout-note}
After deduplication, we have `r nrow(deduplicated_myg_spiders)` observations after the exclusion, `r unique(deduplicated_myg_spiders$scientificName) |> length()` species.
:::

### Minimum number of observations 

The final step in our data cleaning workflow is to exclude any species that have fewer than three observations as this is a key requirement for the generation of alpha hulls. 

```{r, include=FALSE}
# Which ones have less than or equal 3 
less_than_3_obs <- deduplicated_myg_spiders |> 
  group_by(scientificName) |> 
  summarise(n = n()) |> 
  filter(n <= 3) |> 
  pull(scientificName)

deficient <- deduplicated_myg_spiders |> filter(scientificName %in% less_than_3_obs)

myg_sp_enoughobs <- deduplicated_myg_spiders |> 
  filter(!scientificName %in% less_than_3_obs)
```

::: {.callout-important}
We identified `r length(less_than_3_obs)` species with fewer than three observations. This resulted in an exclusion of `r deduplicated_myg_spiders |> filter(scientificName %in% less_than_3_obs) |> nrow()` observations (`r (( nrow(deficient) / nrow(myg_spiders) )*100) |> round(2)`%).  
:::

::: {.callout-note}
After removing data-deficient taxa, we have `r nrow(myg_sp_enoughobs)` observations after the exclusion, `r unique(myg_sp_enoughobs$scientificName) |> length()` species.
:::

### Citizen science data

While citizen science  is an increasingly important source of data that informs research, it's accuracy and quality impact statistical inference. This is likely due to improper species identification.

As such, we decided to conduct the endemism analysis using the cleaned data that includes citizen science data (e.g. basis of record = `"HUMAN_OBSERVATION"`), as well as a dataset with we exclude citizen science data (e.g. basis of record = `"PRESERVED_SPECIMEN"`)

```{r, include = FALSE}
expert_records <- myg_sp_enoughobs |> 
  filter(!basisOfRecord == "HUMAN_OBSERVATION")

citsci <- myg_sp_enoughobs |> 
  filter(basisOfRecord == "HUMAN_OBSERVATION")
```

::: {.callout-important}
There were  `r nrow(citsci)` records that were flagged with basis of record = `"HUMAN_OBSERVATION"`. This resulted in an exclusion of `r (( nrow(citsci) / nrow(myg_spiders) )*100) |> round(2)`% of the original data) in the "preserved specimen only" dataset.  
:::

::: {.callout-note}
After removing data-deficient taxa, we have `r nrow(expert_records)` observations after the exclusion, `r unique(expert_records$scientificName) |> length()` species.
:::

## Generation of $\alpha$ hulls

::: {.callout-tip title="Source code"}
The alpha-hull workflow can be found [here](https://github.com/invertsau/inverthotspot/blob/main/R/04_alphahulls_mygalomorph.Rmd)
:::

Spatial data for invertebrates are typically sparse, often resulting in exclusion of entire species when using advanced spatial modelling methods such as species distribution models. 

One way to retain as many species as possible in a spatial analysis is to represent species range with alpha-hulls, a form of spatial polygon. An alpha-hull can be computed using a minimum of three data points, which allows the inclusion of data-deficient invertebrates in our endemism analysis

Using the cleaned data, we applied the `EOO.computing()` function from R package [`ConR`](https://github.com/gdauby/ConR) to quantify alpha-hulls for all species that had at least 3 records (n = `r # myg_spiders_cleaned$species |> unique() |> length()`). We used an alpha value of 2 and a buffer size of 0.000001 (which approximates to ~100m). The alpha-hull workflow is laid out in [this document](https://github.com/invertsau/inverthotspot/blob/main/R/04_alphahulls_mygalomorph.Rmd). 

Alpha-hulls were converted into `SpatialPolgyon` objects using the [`sp`](https://cran.r-project.org/package=sp) R package and exported for endemism analysis 

## Biodiversity metrics

::: {.callout-tip title="Source code"}
The biodiversity metrics workflow can be found [here](https://github.com/invertsau/inverthotspot/blob/main/R/05_endemism_mygalomorph.Rmd)
:::

In order to quantify patterns of species richness and endemism, we need to convert our point based (i.e. coordinates for each occurrence of a species) into a community matrix, whereby each row in the matrix corresponds to a different site, while each column represents a different species. The entries in the matrix indicate whether a species is present at a particular site (often with a 1 for presence and 0 for absence) or how abundant the species is at that site. See [here](https://cran.r-project.org/web//packages/phyloregion/vignettes/phyloregion-intro.html) for further information.

We converted our alpha-hulls into a community matrix using the `poly2comm()` function in the `phyloregion` R package. The resolution or grid size is set at 0.5 decimal degrees. The `poly2comm()` also computes abundance (the number of individuals in each cell) and species rich (number of species in each cell).

```{r, include=FALSE}
#| fig-cap: 
#|   - "Alpha-hulls of Mygalomorphae spiders from our cleaned dataset"
pacman::p_load(phyloregion, terra, sf, sp, tidyverse, ggplot2, ozmaps, tmap, viridis)

species_polys <- readRDS(here("output/spatial/Spatial_alpha_hulls_cleaned_Mygalomorphae_withassertions_2024-03-13_ALA.rds"))

# Combine into one large spatial dataframe
combinedShp <- do.call(what = rbind, args=species_polys)

## Assign species names
combinedShp <- terra::vect(combinedShp)
names(combinedShp) <- "species"

combinedShp

aus <- st_transform(ozmaps::ozmap_country, 4326)

# Base map 
base_map <- ggplot() + 
  geom_sf(data = aus, fill = NA, colour = "black") + 
  theme_minimal()

all_myg_alpha_sf <- readRDS(here("output/spatial/Spatial_alpha_hulls_sf_class_cleaned_Mygalomorphae_withassertions_2024-03-13_ALA.rds"))

```

```{r, echo=FALSE}
#| fig-cap: 
#|   - "Community matrix of Mygalomorphae spiders from our cleaned dataset"
# Base map 
 base_map  + 
  geom_sf(data = all_myg_alpha_sf, 
          aes(geometry = x),
           # colour = "black",
          colour = "#609966") + 
  coord_sf(c(110, 155)) +
  theme_minimal() |> 
  theme(legend.position = "none")

comm.poly <- phyloregion::polys2comm(dat = combinedShp, species = "species", trace=1, res = 0.5)
plot(comm.poly$map)
```

### Quantifying endemism

Endemism is a measure of rarity relative to other species (refs). There are multiple metrics to assess which areas are of importance for Mygal spiders, each have their own caveats. In order to get a fuller picture of the distribution of species and importantly, rare species that are limited in their range, we need to use a combination of endemism metrics. 

#### Weighted endemism

Weighted endemism is species richness inversely weighted by species ranges(Crisp et al. 2001),(Laffan and Crisp 2003),(Barnabas H. Daru et al. 2020).  It gives higher weight to species with smaller ranges, emphasizing areas with many range-restricted species. WE highlights areas with a high concentration of rare species, which can be crucial for conservation efforts, however regions with high species richness can have inflated WE values simply because they have more species, not necessarily more endemics (https://www.jstor.org/stable/3554498).

We calculated WE using the  `weighted_endemism()` from `phyloregion` package. 

#### Corrected weighted endemism

Corrected weighted endemism accounts for species richness in each cell.  This correction accounts for the fact that areas with more species are likely to have more endemics by chance alone (Crisp and Laffan). It provides a balanced measure, considering rarity and richness and range sizes.

We calculated CWE by dividing the WE in each grid cell by species richness. 

### Statistical inference

We calculated the Moran’s I test statistic, to determine whether spatial patterns of species richness, abundance and endemism for Mygalomorphs are distributed in a way that is not expected  by random chance. Moran’s I is a statistical measure used to assess spatial autocorrelation, which is the degree to which a set of spatial features e.g occurrences or polygons are clustered, dispersed, or randomly distributed across a geographic area (ref).

Moran’s I ranges from -1 to 1:
 
- 1: Perfect positive spatial autocorrelation (values are highly clustered).
- 0: No spatial autocorrelation (random distribution).
- -1: Perfect negative spatial autocorrelation (values are perfectly dispersed).

## Data and code availability

All data and code to reproduce the R portion of our analyses can be found at our [Github repository](https://github.com/invertsau/inverthotspot).
